#!/usr/bin/env bash

if [[ -z "$RERUN_MODULES" ]]; then
    echo >&2 "RERUN_MODULES not defined"
    exit 1
fi

set -e

LIBDIR=$(dirname $(dirname $0))
. $LIBDIR/functions.sh || exit 1

[ $# = 3 ] || { 
    echo >&2 "usage: $0 <moddir> <module> <command>" 
    exit 1 ; 
}
moddir=$1 module=$2 command=$3

# list the options that set a default
optionsWithDefaults=$(optionsWithDefaults $RERUN_MODULES $module $command)

# list the options that are required
optionsRequired=$(optionsRequired $RERUN_MODULES $module $command)

# list the options that have variables to export
optionsExported=$(optionsExported $RERUN_MODULES $module $command)

groovy_addOptionparser(){
    local optName=$1
    local optVarname=$(trops $optName)
    local ARGUMENTS=$(rerun_optionArguments $moddir $module $command $optName)
    local SHORT=$(rerun_optionShort $moddir $module $command $optName)
    if [ -n "${SHORT}" ] 
    then
        argstring=$(printf ' case ~/--%s|-%s/:' "${optName}"  "${SHORT}")
    else
        argstring=$(printf " case ~/--%s/:" "${optName}" )
    fi
    if [ "$ARGUMENTS" == "false" ]
    then
        printf " %s\n parsed['%s']=true \n break\n" "${argstring}" "$optName"
    else
        printf " %s\n def opt='%s'\nif(i+1>=args.length){\n usageError(opt) \n}\n parsed[opt]=args[++i] \nbreak\n" \
            "$argstring" "$optName"
    fi
}
    
(
    cat <<EOF
#!/bin/env groovy
/*
# Generated by stubbs:add-option. Do not edit, if using stubbs.
# Created: $(date)
#
#/ usage: $module:$command $(add_commandUsage $moddir $module $command)
*/
class OptsParser{
    static names="$(rerun_options $moddir $module $command)".split(' ') as List
    static required="$optionsRequired".split(' ') as List
    static exported="$optionsExported".split(' ') as List
    static defaults=[
    $(for opt in $(echo $optionsWithDefaults|sort); do
printf "'%s':'%s',\n" $opt $(rerun_optionDefault $moddir $module $command $opt)
done)
    ]
    static usage='''
#/ usage: $module:$command $(add_commandUsage $moddir $module $command)
'''.substring(4)
    def options=[:]
    def getAt(key){ options[key] }
    def propertyMissing(String key){ options[key] }
    def propertyMissing(String key, value) { options[key] = value }
    static usageError(opt){
        System.err.println usage
        throw new RuntimeException("Usage error: "+opt)
    }
    static parse(args){
        def parsed=[:]
        for(def i=0;i<args.length;i++){
            switch(args[i]){
$(for o in $(rerun_options $moddir $module $command); do 
printf "      %s\n" "$(groovy_addOptionparser $o)"; 
done)
                default:
                    usageError("unknown option: "+args[i])
            }
        }
        //If defaultable options variables are unset, set them to their DEFAULT
        defaults?.each{k,v-> 
            if(null==parsed[k]){parsed[k]=v}
        }
        // Check required options are set
        required?.each{opt->
            if(null==parsed[opt]){ usageError('missing required option: --'+opt)}
        }
        // If option variables are declared exportable, export them.
        exported?.findAll{parsed[it]}.each{opt->
            System.properties['RERUN_OPTION:'+opt]=parsed[opt]
        }
        new OptsParser(options:parsed)
    }
    public String toString(){
        return options.toString()
    }
}

OptsParser.parse(args)
EOF
) 
    # generated to stdout

