#!/usr/bin/env bash
#
#/ command: stubbs:docs: "generate the docs"
#/ usage: stubbs:docs --module|-m <> [--dir <>]
#
# Create a set of documentation for the module.
# A Unix man page and an HTML view of the module.
#
# 

# Parse the command options
[ -r $RERUN_MODULE_DIR/commands/docs/options.sh ] && {
  source $RERUN_MODULE_DIR/commands/docs/options.sh
}

# Source common function library
. $RERUN_MODULE_DIR/lib/functions.sh || { 
    echo >&2 "failed loading function library" ; exit 1 ; 
}

shocco() {
    command $RERUN_MODULE_DIR/bin/shocco.sh "$@"
}

#
# set catchall LANG support to avoid system locale errors
#
export LC_ALL=C



# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: stubbs:docs. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Source the docs functions.
. $RERUN_MODULE_DIR/lib/docs.sh


# Intendentation formatting string.
: ${PAD:="  "}

# Command execution
# -----------------

# Change directory to be relative to what would be RERUN_MODULE_DIR.
RERUN_MODULE_HOME_DIR=$(rerun_module_exists $MODULE)
cd $RERUN_MODULE_HOME_DIR

# Check the specified directory and default it if necessary.
# 
# * Resolve the path to be sure it's absolute, if specified.
# * Default the documentation directory as a subdir to its module.
if [[ -n "${DIR:-}" ]]
then
    DIR=$(rerun_path_absolute "$DIR")
else
    DIR="$RERUN_MODULE_HOME_DIR/docs"
fi

# Create the documentation directory.
mkdir -p $DIR

# Copy the CSS 
CSS=$DIR/docs.css
cp $RERUN_MODULE_DIR/lib/docs.css $CSS

#
# Create the HTML documentation site.
# 
#  * options: page and index for all options
#  * tests: index for all tests
#  * commands: page and index for all commands
#  * library: index for all libraries
#  * module page: listings for all the above.


# Options
# -------
#
mkdir -p $DIR/options
cp /dev/null  $DIR/options.index.md
if [[ -d options ]]
then
    for opt_me in $(find options -name metadata)
    do
        opt_dir=$(dirname $opt_me)
        option=$(basename $opt_dir)
        mkdir -p $DIR/options/$option
        docs_option_to_md $opt_me $MODULE > $DIR/options/$option/index.md

        markdown $DIR/options/$option/index.md |
        docs_html_layout $option ../../docs.css > $DIR/options/$option/index.html

        printf "* [%s](options/%s/index.html): %s\n" \
            $option $option "$(rerun_property_get $opt_dir DESCRIPTION)" >> $DIR/options.index.md
    done
fi

# Tests
# -----

mkdir -p $DIR/tests
cp /dev/null $DIR/tests.index.md
# Generate shocco and markdown for all tests.
#
for test in tests/*-test.sh
do
    test_file=$(basename $test)
    test_name=${test_file%*-test.sh}
    shocco -t $test_name $test > $DIR/tests/$test_name.html
    docs_test_to_md $test $MODULE > $DIR/tests/$test_name.md
    printf "* [%s](tests/%s.html)\n" \
        $test_name $test_name >> $DIR/tests.index.md
done

#
# Commands
# --------
#
mkdir -p $DIR/commands
cp /dev/null  $DIR/commands.index.md
for com_me in commands/*/metadata
do
    com_dir=$(dirname $com_me)
    com_name=$(basename $com_dir)
    mkdir -p $DIR/commands/$com_name

    shocco -t $com_name $com_dir/script > $DIR/commands/$com_name/script.html || {
        rerun_die "Something crazy happend calling shocco on document: \"$com_name\"."
    }
    docs_command_to_md $com_me $MODULE > $DIR/commands/$com_name/index.md

    markdown $DIR/commands/$com_name/index.md |
    docs_html_layout $com_name ../../docs.css > $DIR/commands/$com_name/index.html

    printf "* [%s](commands/%s/index.html): %s\n" \
        $com_name $com_name "$(rerun_property_get $com_dir DESCRIPTION)" >> $DIR/commands.index.md
done

#
# Library
# -------
#
mkdir -p $DIR/lib
cp /dev/null  $DIR/library.index.md
for lib in lib/*.sh
do
    lib_file=$(basename $lib)
    lib_html=${lib_file%.sh}.html

    shocco -t $lib_file $lib > $DIR/lib/${lib_html} 2>/dev/null; # redirect complaints of no shebang

    printf "* [%s](lib/%s)\n" \
        $lib_file $lib_html  >> $DIR/library.index.md
done

# Module page
# -----------
#
cat >$DIR/index.md <<MARKDOWN
# $MODULE

$(rerun_property_get $RERUN_MODULE_HOME_DIR DESCRIPTION)

## SYNOPSIS

    $(basename ${RERUN}) [ARGS] $(docs_module_synopsis $MODULE) [OPTIONS]

## README

$(test -f README.md && cat README.md)

## COMMANDS

$(cat $DIR/commands.index.md)

## OPTIONS

$(cat $DIR/options.index.md)

## TESTS

$(cat $DIR/tests.index.md)

## LIBRARY

$(cat $DIR/library.index.md)

## METADATA

$(docs_metadata_to_md metadata)

----

*Generated by stubbs:docs $(date)*
MARKDOWN

# Unix man page
# -------------

# Path to the unix manual page. 
MANPAGE=$DIR/$MODULE.1
VERSION="$(rerun_property_get $RERUN_MODULE_HOME_DIR VERSION)" || { VERSION=1 ; }
docs_man_page "$VERSION" "$MODULE" > $MANPAGE
rerun_log info "Unix manual: $MANPAGE"


#
# Generate the HTML for the module page
#
markdown $DIR/index.md | docs_html_layout $MODULE docs.css > $DIR/index.html
rerun_log info "HTML site: $DIR/index.html"

# Done
