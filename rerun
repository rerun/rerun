#!/usr/bin/env bash
#
# **rerun** - If you've got a bunch of loose
# unstructured shell scripts, rerun will help you
# turn them into testable automation modules.
# 
# Minimalism is rerun's goal. It will try to stay out of your way
# yet take care of some of your grunt work.
#
#/ usage: rerun [-h][-v][-V][--version] [-M <dir>] [--answer <file>] [module:[command [options]]]
#
# __Install__
# 
# See [wiki](http://github.com/rerun/rerun/wiki) for install and
# setup instructions.

# The rerun version.

RERUN_VERSION=1.0.2

# To disable color effects: `unset RERUN_COLOR`.

if [[ ! -z "${RERUN_COLOR:-}" ]]
then
    ul="\033[4m" ; _ul="\033[0m" ; # underline
    gray="\033[38;5;238m" ; _gray="\033[0m" ; # gray
    red="\033[31m" ; _red="\033[0m" ; # red
    bold="\033[1m$*\033[0m" ; _bold="\033[0m" ; # bold
else
    ul="" _ul=""    gray="" _gray=""    red=""_red=""
    bold="" ; _bold="" ; 
fi

# Public functions
# ----------------------
# 
# The rerun public function library contains 
# a range of functions useful for looking up
# and executing rerun commands.
# This rerun script can be sourced.
#

#
# _rerun_die_ - Print an error message and exit with exit code status.
#
#     rerun_die ?exit_code? ?message?
#
# Arguments:
#
# * exit_code:   Exit code status. Defaults to 1.
# * message:     Text to print in message
#
# Notes: 
#
# * Messages are written to stderr.
# * Use text effects if `RERUN_COLOR` environment variable set.
# * Message format:     `"ERROR : ?message?"`
# * Exit status returned to invoking command: 0
rerun_die() {   
   [[ $# -gt 1 ]] && { 
	    exit_status=$1
        shift        
    } 
    local -i frame=0; local info= 
    while info=$(caller $frame)
    do 
        local -a f=( $info )
        [[ $frame -gt 0 ]] && {
            printf >&2 "ERROR in \"%s\" %s:%s\n" "${f[1]}" "${f[2]}" "${f[0]}"
        }
        (( frame++ )) || :; #ignore increment errors (i.e., errexit is set)
    done

    if [[ -n "${RERUN_COLOR:-}" ]]
    then echo >&2 -e ${red}"ERROR: $*"${_red} 
    else echo >&2 "ERROR: $*"
    fi
    exit ${exit_status:-1}
}

#
# - - -
#

# _rerun_syntax_error_ - Print a syntax error and exit with code 2.
#
#     rerun_syntax_error ?message?
# 
# Arguments:
#
# * message:     Text to print in message
#
# Notes: 
#
# * Messages are written to stderr. 
# * Use text effects if `RERUN_COLOR` environment variable set.
# * Message format:     `"SYNTAX : ?message?"`
# * Exit status returned to invoking command: 2
rerun_syntax_error() {
    if [[ -n "${RERUN_COLOR:-}" ]]
    then echo >&2 -e ${red}"SYNTAX: $*"${_red} 
    else echo >&2 "SYNTAX: $*" 
    fi
    exit 2
}

#
# - - -
#

# _rerun_option_check_ - Check option has sufficent has an argument. 
#
#     rerun_option_check nargs option
#
# Arguments:
#
# * nargs:     Number of arguments passed to option.
# * option:    Option name.
#
# Notes: 
#
# * Return 0 if there is an argument.
# * Return 1 otherwise 
rerun_option_check() {
    if [[ "$1" -lt 2 ]]
    then rerun_syntax_error "option requires argument: ${2:-}"
    else return 0
    fi
}

#
# - - -
#

# _rerun_option_usage_ - print usage summary and exit.
#
#     rerun_option_usage 
#
# Arguments: _None_
#
# Notes: 
#
# * Parses invoking shell script file for usage summary.
# * Format: `usage: ?text?`
# * Return 2
# 
rerun_option_usage() {
    if [ -f $0 ]
    then grep '^#/ usage:' <"$0" | cut -c4- >&2
    else echo >&2 "usage: check command for usage." 
    fi
    return 2
}

#
# - - -
#


# _rerun_options_parse_ - Parse the command arguments and set option variables.
#
#     rerun_options_parse "$@"
#
# Arguments:
#
# * the command options and their arguments.
#
# Notes:
# 
# * Sets shell variables for any parsed options.
# * The "-?" help argument prints command usage and exits 2.
# * This function can be overriden by command scripts.
# * Set defaultable options.
# * Check required options are set
# * If option variables are declared exportable, export them.
# * Return 0 for successful option parse.
#
rerun_options_parse() {
    while [ "$#" -gt 0 ]; do
        OPT="$1"
        case "$OPT" in
            -?) rerun_option_usage
                exit 2
                ;;           
            *)
              break ; # end of options, just arguments left
        esac
        shift
    done
    return 0
}

#
# - - -
#

# _rerun_modules_ - List the modules by name.
#
#     rerun_modules directory 
#
# Arguments:
#
# * directory:     Directory containing modules.
#
# Notes: 
#
# * Returns a list of space separated module names.
# 
rerun_modules() {
    [[ ! $# -eq 1 ]] && { 
	    rerun_die 'wrong # args: should be: rerun_modules directory'
    }
    [[ ! -d $1 ]] && rerun_die "directory not found: $1"
    local -a modules
    for f in `echo $1/*/metadata`
    do
       if [[ -f $f ]]
        then 
            local module="$(basename $(dirname $f))" 
            [[ -z "${modules:-}" ]] && modules=( $module ) || modules=( ${modules[*]} $module )
        fi 
    done
    echo ${modules[*]}
}

#
# - - -
#

# _rerun_commands_ - List the commands for the specified module.
#
#     rerun_commands directory module command
#
# Arguments:
#
# * directory:     Directory containing modules.
# * module:        Module name.
# Notes: 
#
# * Returns a list of space separated command names.
# 
rerun_commands() {
   [[ ! $# -eq 2 ]] && { 
	    rerun_die 'wrong # args: should be: rerun_commands directory module'
    }
    [[ ! -d $1 ]] && rerun_die "directory not found: $1"
    local -a commands=()
    for c in `echo $1/$2/commands/*/metadata`
    do
        if [[ -f $c ]]
        then 
            local command="$(basename $(dirname $c))" 
            [[ -z "${commands:-}" ]] && commands=( $command ) || commands=( ${commands[*]} $command )
        fi 
    done
    echo ${commands[*]:-}
}

#
# - - -
#


# _rerun_options_ - List the options assigned to command.
#
#     rerun_options directory module command
#
# Arguments:
#
# * directory:     Directory containing modules.
# * module:        Module name.
# * command:       Command name.
#
# Notes: 
#
# * Returns a list of space separated option names.
# * Conditions: If metadata is not found, an empty list is returned.
# 
rerun_options() {
    [[ ! $# -eq 3 ]] && { 
	    rerun_die 'wrong # args: should be: rerun_options modules_dir module command'
    }
    [[ ! -d $1 ]] && rerun_die "directory not found: $1"

    local -r modules_dir="$1" module=$2 command=$3
    if [[ -f $modules_dir/$module/commands/$command/metadata ]] 
    then
        ( .  $modules_dir/$module/commands/$command/metadata ; echo ${OPTIONS:-} )
    else
        echo ""
    fi
}

#
# - - -
#

# _rerun_module_options_ - List the options for the specified module.
#
#     rerun_module_options directory module
#
# Arguments:
#
# * directory:     Directory containing modules.
# * module:        Module name.
# Notes: 
#
# * Returns a list of space separated option names.
# 
rerun_module_options() {
   [[ ! $# -eq 2 ]] && { 
	    rerun_die 'wrong # args: should be: rerun_module_options directory module'
    }
    [[ ! -d $1 ]] && rerun_die "directory not found: $1"
    local -a options=()
    for o in `echo $1/$2/options/*/metadata`
    do
        if [[ -f $o ]]
        then 
            local option="$(basename $(dirname $o))" 
            [[ -z "${options:-}" ]] && options=( $option ) || options=( ${options[*]} $option )
        fi 
    done
    echo ${options[*]:-}
}

#
# - - -
#

# _rerun_list_contains_ - Checks if element is contained in list.
#
#     rerun_list_contains element list
#
# Arguments:
#
# * element:     String element to check.
# * list:        A space separated list of elements.
#
# Notes: 
#
# * Return 0 if element is contained in list.
# * Return 1 otherwise.


rerun_list_contains () {
    [[ ! $# -ge 2 ]] && {
        rerun_die 'wrong # args: should be: rerun_list_contains element list'
    }
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

#
# - - -
#

# _rerun_list_remove_ - remove element from list
#
#     rerun_list_remove element list
#
# Arguments:
#
# * element:     String element to remove.
# * list:        A space separated list of elements.
#
# Notes: 
#
# * Returns  minus the element.
# 
rerun_list_remove() {
    local -a retlist=()
    for e in ${@:2}
    do
        if [[ $1 != $e ]]
        then 
            [[ -z "${retlist:-}" ]] && retlist=( $e ) || retlist=( ${retlist[*]} "$e" )
        fi
    done
    echo "${retlist[@]:-}"
}

#
# - - -
#

#
# _rerun_path_absolute_ - Returns the file name's absolute path.
#
#     rerun_absoluatePath file
#
# Arguments:
#
# * file:     File name. 
#
# Notes: 
#
# * File name can be relative.

rerun_path_absolute() {
    local -r infile="${1:-$0}"
    {
        if [[ "${infile#/}" = "${infile}" ]]; then
            echo $(pwd)/${infile}
        else
            echo ${infile}
        fi
    } | sed '
    :a
    s;/\./;/;g
    s;//;/;g
    s;/[^/][^/]*/\.\./;/;g
    ta'
}

#
# - - -
#

# _rerun_property_get_ - Print the value for the specified metadata property.
#
#     rerun_property_get directory  property
#
# Arguments:
#
# * directory:     Directory containing metadata.
# * property:      Property name.
#
# Notes: 
#
# * Prints property value.
# * Die if directory not found.
# * Conditions: If metadata not found, nothing is returned.
#
rerun_property_get() {
    [[ ! $# -eq 2 ]] && { 
        rerun_die 'wrong # args: should be: rerun_property_get directory property'
    }
    local -r directory=$1 property=$2
    [[ ! -f ${directory}/metadata ]] && rerun_die "metadata not found: ${directory}/metadata"
    grep -q "^$property=" ${directory}/metadata && {
        set +u
        ( . ${directory}/metadata ; 
            eval echo \$${property:-} )
        set -u
        return 0
    }
    return $?
}

#
# - - -
#

# _rerun_property_set_ - Set the value for the specified metadata property.
#
#     rerun_property_set directory  property=value ?property=value?
#
# Arguments:
#
# * directory:     Directory containing metadata.
# * property:      Property name to assign value.
# * value:         A property value.
#
# Notes: 
#
# * Multiple property assignments are made by specifying additional property=value bindings.
#
rerun_property_set() {
    [[ $# -lt 2 ]] && { 
        rerun_die 'wrong # args: should be: rerun_property_set directory property=value ?property=value?'
    }
    [[ ! -d $1 ]] && rerun_die "directory not found: $1"

    local -r directory=$1 
    local -a sed_patts=()
    shift ;
    while [ "$#" -gt 0 ]
    do
        local property=${1%=*} value=${1#*=}

        if grep -q "^$property=" $directory/metadata
        then 
            pattern=$(printf -- "-e s,%s=.*,%s=\"%s\"," $property $property "$value")
            [[ -z "${sed_patts:-}" ]] && sed_patts=( "$pattern" ) || sed_patts=( ${sed_patts[@]} "$pattern" )
        else 
            echo "$property=\"$value\"" >> $directory/metadata || rerun_die "Failed adding property: $property"
        fi
        shift; # move to next property=value binding.
    done

    if [[ ${#sed_patts[*]} > 0 ]]
    then
        sed "${sed_patts[@]}" $directory/metadata \
            > $directory/metadata.$$ || rerun_die  "Failed updating property data"
        mv $directory/metadata.$$ $directory/metadata || rerun_die "Failed updating property data"
    fi

}


#
# - - -
#

# _rerun_script_lookup_ - Resolve the command script for specified command in module.
#
#     rerun_script_lookup directory command
#
# Arguments:
#
# * directory:     Module directory
# * command:       Command name
#
# Notes: 
#
# * Returns path to command script, if one is found.
# * Searches for files in directory named `script`.
#   * Backwards compatability list: `default.sh` 
rerun_script_lookup() {
    [[ ! $# -eq 2 ]] && { 
        rerun_die 'wrong # args: should be: rerun_script_lookup directory command'
    }
    [[ ! -d $1 ]] && rerun_die "directory not found: $1"

    local -r module_dir=$1 command=$2
    local -r command_dir=$module_dir/commands/${command}

    local -a searchlist=( $command_dir/script  $command_dir/default.sh )
    for file in ${searchlist[*]}
    do
        if [[ -f  "$file" ]]
        then 
            echo $file
            return 0
        fi
    done
    return 1
}

#
# - - -
#

# _rerun_script_exists_ - Checks resolved script for command exists.
#
#     rerun_script_exists directory command
#
# Arguments:
#
# * directory:     Module directory.
# * command:       Command name.
#
# Notes: 
#
# * Return 0 if command script exists.
# * Return 1 otherwise.
# 
rerun_script_exists() {
    [[ ! $# -eq 2 ]] && { 
        rerun_die 'wrong # args: should be: rerun_script_exists directory command'
    }
    local -r module_dir=$1 command=$2
    if [[ -f "$(rerun_script_lookup $module_dir $command)" ]]
    then return 0
    else return 1
    fi
}

#
# - - -
#

# _rerun_module_exists_ - Searches for module and returns its directory if found.
#
#     rerun_module_exists module 
#
# Arguments:
#
# * module:     Module name
#
# Notes: 
#
# * It's a module if it has a `metadata` file in the subdirectory.
# * Give precedence to finding the module in $RERUN_MODULES.
# * If running an installed version of Rerun check the system location for the module:
rerun_module_exists() {
    [[ ! $# -eq 1 ]] && { 
        rerun_die 'wrong # args: should be: rerun_module_exists module'
    }
    local -r module=$1

    if [[ -f "${RERUN_MODULES:-}/$module/metadata" ]]
    then
       echo $RERUN_MODULES/$module
       return 0
    fi

    if [[ "${RERUN_LOCATION:-}" = "/usr/bin" && -f "/usr/lib/rerun/modules/$module/metadata" ]]
    then
       echo /usr/lib/rerun/modules/$module
       return 0
    fi

    echo ""
    return 1
}

#
# - - -
#

# _rerun_command_execute_ - Lookup command script and execute it.
# 
#     rerun_command_execute module comand ?options?
#
# Arguments:
#
# * module:     Module name.
# * command:    Command name.
# * option:     Command options   
# Notes: 
#
# * Exit non zero, if command script is not found.
# * Command options are not required.
#
# Command scripts see the following environment variables:
#   RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#
# User specified a command that did not exist in the RERUN_MODULES directory.
#
# __Execution__
# 
# Execute the command script if it is executable
# otherwise run it using the same shell as rerun.
# Return the command script's exit code as the result.
#
rerun_command_execute() {
    [[ ! $# -ge 2 ]] && { 
        rerun_die "wrong # args: should be: rerun_command_execute module command options" 
    }
    local -r module=$1; 
    local -r command=$2; 
    shift; shift; # options are the remaining positional parameters.

    RERUN_MODULE_DIR=$(rerun_module_exists "$module") || rerun_syntax_error "module not found: \"$module\""

    rerun_script_exists "${RERUN_MODULE_DIR:-}" $command || {
        rerun_syntax_error "command not found: \"$module:$command\""
    }
    local -r RERUN_SHELL=$SHELL
    local COMMAND_SHELL=$(rerun_property_get "$RERUN_MODULE_DIR" SHELL)
    : ${COMMAND_SHELL:=$RERUN_SHELL}; # default it.

    local -r script=$(rerun_script_lookup "$RERUN_MODULE_DIR" "$command")

    export RERUN RERUN_VERSION RERUN_MODULES RERUN_MODULE_DIR
    
    if [[ -n "${RERUN_VERBOSE:-}" ]]
    then
        $COMMAND_SHELL $RERUN_VERBOSE "$script" "$@"
        RERUN_EXITSTATUS=$?
    elif [[ -x "$script" ]]
    then
        "$script" "$@"
        RERUN_EXITSTATUS=$?
    else
        $COMMAND_SHELL "$script" "$@"
        RERUN_EXITSTATUS=$?
    fi

    return ${RERUN_EXITSTATUS}
}

#
# - - -
#

#
#
#  _- End public function library_.
#

# Check if this file is being sourced, or executed.
# If not being executed, return now.
if [[ "${BASH_SOURCE:-}" != "$0" && "$0" != "bash" ]]
then
    return; # Stop sourcing the file here.
fi

#
# Enable a stringent exeuction environment.
#
set -u ; # Exit if unassigned variable accessed.
set -e ; # Exit if command execution fails.


# - - -
# Private helper functions:
# 

# 
# __rerun_options_populate_ - generate a command argument string populating them with answers
#
#
_rerun_options_populate() {
    [[ $# -lt 2 ]] && {
        echo >&2 "usage: _rerun_options_populate: module command ?answers?" 
        return 2
    }
    local -r module=$1 command=$2
    local module_dir=$(rerun_module_exists "$module") || rerun_syntax_error "module not found: \"$module\""
    local argline=
    for cmd_option in $(rerun_options $(dirname $module_dir) $module $command)
    do        
        local metadata=$(dirname $module_dir)/$module/options/$cmd_option/metadata
        local option=$(
            . $metadata; # source the option metadata
            [[ -n "$LONG" ]] && flag="$LONG" || flag="$NAME"
            if [[ "$ARGUMENTS" = "true" && -r "$3" ]]
            then 
                local var=$(echo $NAME | tr "[a-z]" "[A-Z]")
                local arg=$(awk -F= "/^$var/ {print \$2}" $3)
            fi
            [[ -n "$arg" ]] && printf -- "--%s %s" "$flag" "$arg"
        )
        argline="$argline $option"
    done
    echo "$argline"
}



#
# __rerun_banner_ - Prints logo and version info with a rainbow of colors!
#
# Notes:
#
# * Prints ANSI color codes into your output
_rerun_banner() {
    echo $(tput setaf 1) " _ __ ___ _ __ _   _ _ __"
    echo $(tput setaf 2) "| '__/ _ \ '__| | | | '_ \ "
    echo $(tput setaf 3) "| | |  __/ |  | |_| | | | |"
    echo $(tput setaf 4) "|_|  \___|_|   \__,_|_| |_|"
    echo $(tput setaf 5) "Version: ${RERUN_VERSION:-}. License: Apache 2.0."$(tput sgr0)
}


#
# __rerun_examples_ - Print usage examples
#
# 
_rerun_examples() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_examples prog" 
    }
    local -r prog=$1
    if [[ "${RERUN_COLOR:-}" = "true" ]]
    then echo >&2 $(tput sgr 0 1)"Examples:"$(tput sgr0)
    else echo >&2 "Examples:"
    fi
echo "| \$ $prog
| => List installed modules.
| \$ $prog freddy
| => List  commands.
| \$ $prog freddy:dance --jumps 3
| => Execute a command."
}

#
# __rerun_man_page_ - Show man page for the module
#
# Notes:
#
# * Each module can have a Unix man page. 
# * Use stubbs:docs to generate the man page if one doesn't
# already exist. Display the man page with `nroff`.

_rerun_man_page() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_man module" 
    }
    local -r module=$1
    if [[ ! -f "${RERUN_MODULES:-}/$module/$module.1" 
                && -f "$RERUN_MODULES/stubbs/commands/docs/script" ]]
    then ${RERUN:-rerun} stubbs:docs --module $module 
    fi
    if [[ -f "$RERUN_MODULES/$module/$module.1" ]]
    then nroff -man "$RERUN_MODULES/$module/$module.1" | ${PAGER:-more}
    else echo >&2 "Manual could not be generated." 
    fi
}

PAD="  "

# __rerun_module_summary_ - Print a module summary.
#
# Arguments
# 
# * directory: Module directory
#
_rerun_module_summary() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_module_summary module_dir" 
    }
    local -r module_dir=$1
    local -r module_dirname=$(rerun_module_exists $(basename "$module_dir")) && {
        local -r module_name=$(basename "$module_dir")
        local -r module_desc=$(rerun_property_get $module_dir DESCRIPTION)
        local -r module_vers=$(rerun_property_get $module_dir VERSION) || module_vers=""
        echo "${PAD:-}${module_name}: \"${module_desc}\" - $module_vers" 
    }
}

# __rerun_modules_summary_ - List the modules.
#
# Arguments
# 
# * directory: Directory containing modules
#
# Notes:
#
# * When rerun is installed in the system location
# and rerun modules is different to the system location,
# then list the system installed ones separately.
#
_rerun_modules_summary() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_modules_summary directory" 
    }
    local -r directory=$1
    echo -e $gray"Available modules in \"${RERUN_MODULES:-}\":"$_gray
    shopt -s nullglob # enable
    set +u
    for module in $directory/*
    do
        [[ -f $module/metadata ]] && _rerun_module_summary $module
    done
    if [[ ${RERUN_LOCATION:-} = "/usr/bin" 
                && ${RERUN_MODULES:-} != "/usr/lib/rerun/modules" ]]
    then
        echo
        echo -e $gray"Available modules in \"/usr/lib/rerun/modules\":"$_gray
        for module in /usr/lib/rerun/modules/*
        do
           [[ -f $module/metadata ]] && _rerun_module_summary $module
        done
    fi
    set -u
}

#
# __rerun_commands_summary_ - List commands
# 
#
_rerun_commands_summary() {
    [[ ! $# = 2 ]] && { 
        rerun_die "wrong # args: should be: _rerun_commands_summary directory module" 
    }
    local -r directory=$1
    local -r module=$2
    bold() { echo -e "\033[1m$*\033[0m" ; tput sgr0 ; }

    module_dir=$(rerun_module_exists "$module") || rerun_syntax_error "module not found: \"$module\""
    echo -e $gray"Available commands in module, \"$module_dir\":"$_gray
    shopt -s nullglob # enable

    for cmd in $module_dir/commands/*/metadata
	do
        local cmd_name=$(basename $(dirname "$cmd"))
        local metadata=$module_dir/commands/${cmd_name}/metadata
        [[ -f "$metadata" ]] && cmd_desc=$(rerun_property_get $(dirname $cmd) DESCRIPTION)
        bold "${cmd_name}: \"${cmd_desc}\""
        if [[ -d "$module_dir/commands/${cmd_name}" ]]
        then            
            #
            # List the command options
            local -a options=( $(rerun_options $(dirname $module_dir) $module ${cmd_name}) )
            [[ -z "${options:-}" ]] && continue
            for opt in "${options[@]}"
            do
                local opt_metadata=$module_dir/options/${opt}/metadata
                if [[ -r "$opt_metadata" ]] 
                then
                (   set +u
                    argstring= summary=                  
                    . $opt_metadata ; # Read the option's metadata.                    
                    [[ -n "${SHORT}" ]] && {                    
                       argstring=$(printf ' --%s|-%s'  "$NAME" "$SHORT")
                    } || {
                       argstring=$(printf " --%s" "$NAME" )
                    }	  
                    [[ "$ARGUMENTS" == "true" ]] && {
                        argstring=$(printf "%s <${ul}%s${_ul}>" "$argstring" "$DEFAULT")
                    }
                    [[ "$REQUIRED" != "true" ]] && {
                        summary=$(printf "[%s]: \"%s\"" "${argstring}" "$DESCRIPTION") 
                    } || {
                        summary=$(printf "%s: \"%s\"" "${argstring}" "$DESCRIPTION")
                    }
                    echo -e "$PAD $summary"
                    set -u
                )
                else                    
                    # limited usage summary.
                    echo -e "$PAD --$opt <>: \"no description\""; 
                fi
            done
        fi
    done

}


# Parse rerun command line options
# --------------------------------
RERUN_VERBOSE=
# There are two sets of options, `rerun` specific arguments 
# and command options.

while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
	-h*|--h*)
        _rerun_banner
        rerun_option_usage
        _rerun_examples $(basename "$0")
        exit 0
	    ;;
  	-v)
	    RERUN_VERBOSE="-vx"
	    ;;
  	-V)
	    RERUN_VERBOSE="-vx"
	    set -vx
	    ;;
  	--version)
	    echo >&2 "$RERUN_VERSION"
        exit 0
	    ;;
	--man*)
	    rerun_option_check "$#" "$1"
	    _rerun_man_page $2
	    exit 0
	    ;;	
	-M)
	    rerun_option_check "$#" "$1"
	    RERUN_MODULES="$(rerun_path_absolute $2)"
	    shift
	    ;;
	--answers)
	    rerun_option_check "$#" "$1"
	    ANSWERS="$2"
        [[ ! -f $ANSWERS ]] && rerun_syntax_error "answers file not found: $ANSWERS"
	    shift
	    ;;		  
	*)
	    break;# Ignore remaining arguments as they are for the module.
    esac
    shift
done


# Set the absolute path to this invocation of the rerun script. Drives the Linux FSH usage convention where
# modules located in /usr/lib/rerun/modules are appended to the modules in RERUN_MODULES.
RERUN_LOCATION="$(cd "$(dirname "${BASH_SOURCE[0]:-}" )" && pwd)"

# Default the RERUN_MODULES environment variable.
# If it is not set, then default it to either the system
# install location or relative to the rerun executable.
# TODO: add a unit test for this.

if [[ -z "${RERUN_MODULES:-}" ]]
then
    if [[ "$RERUN_LOCATION" = "/usr/bin" ]]
    then
      RERUN_MODULES="/usr/lib/rerun/modules";  # Linux FSH convention:
    else      
      RERUN_MODULES=${RERUN_LOCATION}/modules; # Set module directory relative to the `rerun` script:
    fi
fi


# Ensure the modules directory path is defined and is a directory.
#
[[ -n "${RERUN_MODULES:-}" && -d "${RERUN_MODULES:-}" ]] || {
    rerun_die "RERUN_MODULES directory not found or does not exist: $RERUN_MODULES"
}

# Clear MODULE and COMMAND in case they were incidentally declared in the environment.

MODULE="" COMMAND=""

# Parse rerun command and their options.
# Use regex to split up command strings.
if [[ "$@" =~ ([^:]+)([:]?[ ]?)([-A-Za-z0-9_]*)([ ]*)(.*) ]]
then
    MODULE=${BASH_REMATCH[1]};    # module
    [ "${BASH_REMATCH[2]}" == ': ' ] && shift ;# eat the extra space char
    COMMAND=${BASH_REMATCH[3]/ /}; # command
    #- BASH_REMATCH[4] contains the whitespace separating command and options.
    #- BASH_REMATCH[5] contains command options.
else
    [[ -n "${1:-}" ]] && MODULE=${1/:/};   # module (minus colon)
fi
# Shift over so the remaining arguments are left to the command options.
[[ "$#" -gt 0 ]] && shift; 

# Read answer file and set positional parameters from them.
if [[ -n "${ANSWERS:-}" && -f "${ANSWERS:-}" ]]
then
    set -- $(_rerun_options_populate $MODULE $COMMAND "$ANSWERS")
fi




#
# Execute rerun
# ===============

# Summary: module or command
# --------------------------
#
# **rerun** provides two listing modes: module and commands.
# If a user specifies `rerun` without arguments, a listing
# of module names and their descriptions is displayed.
# If a user specifies a module name: `rerun <module>`,
# then a listing of commands and their options are displayed.
#
# If no module or command are specified, display a listing of modules, showing each 
# module's name and description. Modules are read from the directory referenced 
# using the `$RERUN_MODULES` environment variable.

if [[ -z "$MODULE" && -z "$COMMAND" ]]
then

    _rerun_modules_summary "$RERUN_MODULES"

    exit 0

# If a module name is specified, show the command set.
# For each command, show that command's option list in summary form
# displaying requirement, name, flags, defaults and description.

elif [[ -n "$MODULE" && -z "$COMMAND" ]]
then

    _rerun_commands_summary "$RERUN_MODULES" "$MODULE"

    exit 0

fi

#
# - - -
#

# Execute script
# ----------------
#
# Set the `RERUN` environment variable so subsequent 
# invocations can use the same executable. 
# 
RERUN=$(rerun_path_absolute $0)
export RERUN
#

#
# Execute the specified command.
# The remaining positional parameters are passed as command options.
#
rerun_command_execute "$MODULE" "$COMMAND" "$@"
#
# Exit rerun with the script execution's exit code.
exit $?
# - - -
# Done!


# More
# ----

# _(c) 2012 Alex Honor - Apache 2 License_
